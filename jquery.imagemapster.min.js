/* ImageMapster 1.2.5 b25
Copyright 2011 James Treworgy
http://www.outsharked.com/imagemapster
https://github.com/jamietre/ImageMapster

A jQuery plugin to enhance image maps.
*/
if(window.Zepto){jQuery=Zepto;
(function(a){a.trim=function(b){return b.replace(/^\s+/,"").replace(/\s+$/,"")
};
a.inArray=function(c,b){return b.indexOf(c)
};
a.fn.clone=function(){var b=a();
this.each(function(){b=b.add(this.cloneNode(true))
});
return b
};
a.fn.elOrEmpty=function(){return this.length?this[0]:{}
};
a.fn.outerWidth=function(){return this.elOrEmpty().outerWidth
};
a.fn.outerHeight=function(){return this.elOrEmpty().outerHeight
};
a.fn.position=function(){var b=this.elOrEmpty();
return{left:b.left,top:b.top}
};
a.browser={};
a.browser.msie=false
}(jQuery))
}(function(a){var b;
a.fn.isJquery=a.fn.isJquery||true;
a.fn.mapster=function(c){if(b[c]){return b[c].apply(this,Array.prototype.slice.call(arguments,1))
}else{if(typeof c==="object"||!c){return b.bind.apply(this,arguments)
}else{a.error("Method "+c+" does not exist on jQuery.mapster")
}}};
a.mapster={};
a.mapster.version="1.2.5b25";
a.mapster.utils={areaCorners:function(g,r,k){var o,p,m,n,e,c,f,d,h,i,q,l;
o=p=e=f=999999;
m=n=c=d=-1;
for(l=g.length-2;
l>=0;
l-=2){h=parseInt(g[l],10);
i=parseInt(g[l+1],10);
if(h<o){o=h;
d=i
}if(h>m){m=h;
f=i
}if(i<p){p=i;
c=h
}if(i>n){n=i;
e=h
}}if(r&&k){a([[c-r,p-k],[e,p-k],[o-r,d-k],[o-r,f],[d-k,m],[f,m],[c-r,n],[e,n]]).each(function(s,j){if(j[0]>0&&j[1]>0){q=j;
return false
}})
}return{tl:[o,p],br:[m,n],tt:q}
},split:function(d){var c=d.split(",");
return a.each(c,function(e){c[e]=a.trim(c[e])
})
},setOpacity:function(c,f,d){if(d){c.style.filter="Alpha(opacity="+String(f*100)+")"
}else{c.style.opacity=f
}},mergeObjects:function(k){var j,e,h,l,o=this,c=this.boolOrDefault(k.add,k.template?false:true),f=k.ignore?o.split(k.ignore):"",g=k.include?o.split(k.include):"",d=k.deep?o.split(k.deep):"",n=k.target||{},m=[].concat(k.source);
if(k.template){n=this.mergeObjects({target:{},source:[k.template,n]})
}h=m.length;
for(e=0;
e<h;
e++){j=m[e];
if(j){for(l in j){if((!f||a.inArray(l,f)<0)&&(!g||a.inArray(l,g)>=0)&&j.hasOwnProperty(l)&&(c||n.hasOwnProperty(l))){if(d&&a.inArray(l,d)>=0&&typeof j[l]==="object"){if(typeof n[l]!=="object"&&c){n[l]={}
}this.mergeObjects({target:n[l],source:j[l],add:c})
}else{n[l]=this.clone(j[l])
}}}}}return n
},clone:function(e){var f,c,g,d;
if(a.isArray(e)){g=[];
d=e.length;
for(c=0;
c<d;
c++){g.push(e[c])
}}else{if(e&&e.clone){g=e.clone()
}else{if(typeof e==="object"&&e&&!e.nodeName){g={};
for(f in e){if(e.hasOwnProperty(f)){g[f]=e[f]
}}}else{g=e
}}}return g
},isElement:function(c){return(typeof HTMLElement==="object"?c instanceof HTMLElement:c&&typeof c==="object"&&c.nodeType===1&&typeof c.nodeName==="string")
},arrayIndexOfProp:function(c,f,e){var d=c.length;
while(d--){if(c[d]&&c[d][f]===e){return d
}}return -1
},boolOrDefault:function(d,c){return this.isBool(d)?d:c||false
},isBool:function(c){return typeof c==="boolean"
},isFunction:function(c){return c&&typeof c==="function"
},ifFunction:function(d,e,c){if(a.isFunction(d)){d.call(e,c)
}},arrayReuse:function(c,e){var d=a.inArray(null,c);
if(d<0){d=c.push(e)-1
}else{c[d]=e
}return d
},each:function(f,c){var d,e;
if(f.constructor===Array){e=f.length;
for(d=0;
d<e;
d++){if(c.call(f[d],d)===false){return false
}}}else{if(f){for(d in f){if(f.hasOwnProperty(d)){if(c.call(f[d],d)===false){return false
}}}}}return true
},getScaleInfo:function(f,e,g,c){var d;
if(!g&&!c){d=1
}else{d=g/f||c/e;
if(d>0.98&&d<1.02){d=1
}}return{scale:(d!==1),scalePct:d,realWidth:f,realHeight:e,width:g,height:c,ratio:g/c}
},scaleMap:function(f,l,c){var h,j,k,m,e,g=a(f),i=this;
if(!g.length){return
}m=g.width();
e=g.height();
function d(){if(!j){j=this.height;
k=this.width;
c(i.getScaleInfo(k,j,m,e))
}}if(l){h=new Image();
h.onload=d;
h.src=f.src;
if(h.width&&h.height){d.call(h)
}}else{j=e;
k=m
}},isImageLoaded:function(c){if(typeof c.complete!=="undefined"&&!c.complete){return false
}if(typeof c.naturalWidth!=="undefined"&&(c.naturalWidth===0||c.naturalHeight===0)){return false
}return true
},fader:(function(){var c=[],e=0,d=function(g,l,h,f,i){var j,m=a.mapster.utils,k;
if(typeof g==="number"){j=m.arrayIndexOfProp(c,"key",g);
if(j===-1){return
}else{k=c[j].element
}}else{j=m.arrayIndexOfProp(c,"element",g);
if(j>=0){c[j]=null
}k=g;
g=++e;
m.arrayReuse(c,{element:k,key:g})
}h=h||1;
l=(l+(h/10)>h-0.01)?h:l+(h/10);
m.setOpacity(k,l,i);
if(l<h){setTimeout(function(){d(g,l,h,f,i)
},f?f/10:15)
}};
return d
}())};
a.mapster.default_tooltip_container=function(){return'<div class="mapster-tooltip" style="border: 2px solid black; background: #EEEEEE; position:absolute; width:160px; padding:4px; margin: 4px; -moz-box-shadow: 3px 3px 5px #535353; -webkit-box-shadow: 3px 3px 5px #535353; box-shadow: 3px 3px 5px #535353; -moz-border-radius: 6px 6px 6px 6px; -webkit-border-radius: 6px; border-radius: 6px 6px 6px 6px;"></div>'
};
a.mapster.render_defaults={fadeDuration:150,altImage:null,altImageOpacity:0.7,fill:true,highlight:null,fillColor:"000000",fillColorMask:"FFFFFF",fillOpacity:0.5,stroke:false,strokeColor:"ff0000",strokeOpacity:1,strokeWidth:1,includeKeys:"",alt_image:null};
a.mapster.defaults=a.mapster.utils.mergeObjects({source:[{render_highlight:{},render_select:{fade:false},fade:true,staticState:null,selected:false,isSelectable:true,isDeselectable:true,singleSelect:false,wrapClass:null,wrapCss:null,onGetList:null,sortList:false,listenToList:false,mapKey:"",mapValue:"",listKey:"value",listSelectedAttribute:"selected",listSelectedClass:null,showToolTip:false,toolTipFade:true,toolTipClose:["area-mouseout"],toolTipContainer:a.mapster.default_tooltip_container(),onClick:null,onMouseover:null,onMouseout:null,onStateChange:null,onShowToolTip:null,boundList:null,onCreateTooltip:null,onConfigured:null,configTimeout:10000,noHrefIsMask:true,scaleMap:true,safeLoad:false,areas:[]},a.mapster.render_defaults]});
a.mapster.area_defaults=a.mapster.utils.mergeObjects({source:[a.mapster.defaults,{toolTip:"",includeKeys:"",isMask:false}],deep:"render_highlight, render_select",include:"fade,fadeDuration,highlight,fill,fillColor,fillOpacity,stroke,strokeColor,strokeOpacity,strokeWidth,staticState,selected,isSelectable,isDeselectable,render_highlight,render_select,isMask,toolTip"});
a.mapster.impl=(function(){var p={},d,o,n,s,j,x=a.mapster.utils,l=false,k=null,m=null,y=false,e={position:"absolute",left:0,top:0,padding:0,border:0};
p.map_cache=[];
function c(u){return p.map_cache.push(u)-1
}function v(z){p.map_cache.splice(z.index,1);
for(var u=p.map_cache.length-1;
u>=this.index;
u--){p.map_cache[u].index--
}}a(window).bind("load",function(){y=true;
a(p.map_cache).each(function(){if(!this.complete&&this.isReadyToBind()){this.initialize()
}})
});
p.test=function(u){return eval(u)
};
function h(A){var z,u;
switch(A.tagName&&A.tagName.toLowerCase()){case"area":u=a(A).parent().attr("name");
z=a("img[usemap='#"+u+"']")[0];
break;
case"img":z=A;
break
}return z?x.arrayIndexOfProp(p.map_cache,"image",z):-1
}function g(z){var u=h(z);
if(u>=0){return u>=0?p.map_cache[u]:null
}}function w(u,A,z){A.each(function(){if(u.listSelectedClass){if(z){a(this).addClass(u.listSelectedClass)
}else{a(this).removeClass(u.listSelectedClass)
}}if(u.listSelectedAttribute){a(this).attr(u.listSelectedAttribute,z)
}})
}function i(C,A){if(!C.boundList){return null
}var u,z,D=a(),B=A.split(",");
C.boundList.each(function(){for(u=0;
u<B.length;
u++){z=B[u];
if(a(this).is("["+C.listKey+'="'+z+'"]')){D=D.add(this)
}}});
return D
}function t(A,B,z,u){if(!A){return false
}if(!A.complete){A.commands.push({that:B,command:z,args:u});
return true
}return false
}s=function(C,z,u,B){var A=this;
A.output=C;
A.input=C;
A.first=B.first||false;
A.args=B.args?Array.prototype.slice.call(B.args,0):null;
A.key=B.key;
A.name=B.name;
A.func_map=z;
A.func_area=u;
A.name=B.name
};
s.prototype.go=function(){var B,A,u,C,E,F=this.input,z=[],D=this;
C=F.length;
for(B=0;
B<C;
B++){A=g(F[B]);
if(A){if(t(A,this.input,this.name,this.args)){if(this.first){E=""
}continue
}u=A.getData(F[B].nodeName==="AREA"?F[B]:this.key);
if(u){if(a.inArray(u,z)<0){z.push(u)
}}else{E=this.func_map.apply(A,this.args)
}if(this.first||typeof E!=="undefined"){break
}}}a(z).each(function(){E=D.func_area.apply(this,D.args)
});
if(typeof E!=="undefined"){return E
}else{return this.output
}};
o=function(u,A){var z=this;
this.index=-1;
this.image=u;
this.options=A;
this.area_options=x.mergeObjects({template:a.mapster.area_defaults,source:A});
this.bindTries=A.configTimeout/200;
this.imgCssText=u.style.cssText||null;
this.initializeDefaults();
this.mousedown=function(B){B.preventDefault()
};
this.mouseover=function(C){var B=z.getDataForArea(this),D;
if(B&&!B.owner.resizing){D=B.effectiveOptions();
z.inArea=true;
if(!k){this.blur()
}if(z.currentAreaId===B.areaId){return
}z.clearEffects(true);
B.highlight(!D.highlight);
if(z.options.showToolTip&&D.toolTip){B.showTooltip()
}z.currentAreaId=B.areaId;
if(a.isFunction(z.options.onMouseover)){z.options.onMouseover.call(this,{e:C,options:D,key:B.key,selected:B.isSelected()})
}}};
this.mouseout=function(C){var D,B=z.getDataForArea(this),E=z.options;
if(B&&!B.owner.resizing){z.inArea=false;
z.clearEffects(false);
if(a.isFunction(E.onMouseout)){E.onMouseout.call(this,{e:C,options:E,key:D,selected:B.isSelected()})
}}};
this.clearEffects=function(B){var C=z.options;
if((z.currentAreaId<0||B!==true)&&z.inArea){return
}z.ensureNoHighlight();
if(C.toolTipClose&&a.inArray("area-mouseout",C.toolTipClose)>=0){z.clearTooltip()
}z.currentAreaId=-1
};
this.click=function(E){var J,F,G,H,C,K=this,B=z.getDataForArea(this),I=z.options;
E.preventDefault();
if(!B||B.owner.resizing){return
}if(!k){this.blur()
}I=z.options;
function D(L){var M;
C=(L.isSelectable()&&(L.isDeselectable()||!L.isSelected()));
if(C){H=!L.isSelected()
}else{H=L.isSelected()
}G=i(I,L.key);
if(a.isFunction(I.onClick)){if(false===I.onClick.call(K,{e:E,listTarget:G,key:L.key,selected:H})){return
}}if(C){J=L.toggleSelection()
}if(I.boundList&&I.boundList.length>0){w(I,G,L.isSelected())
}M=L.effectiveOptions();
if(M.includeKeys){F=x.split(M.includeKeys);
x.each(F,function(){var N=z.getDataForKey(this.toString());
if(!N.options.isMask){D(N)
}})
}}D(B)
};
this.graphics=new j(this)
};
o.prototype.initializeDefaults=function(){this.images=[];
this.imageSources=[];
this.imageStatus=[];
this.altImagesXref={};
this.map=null;
this.base_canvas=null;
this.overlay_canvas=null;
this.imagesAdded=false;
this.imagesLoaded=false;
this.complete=false;
this.commands=[];
this.data=[];
this.originalAreaData=[];
this._xref={};
this._highlightId=-1;
this.currentAreaId=-1;
this._tooltip_events=[];
this.scaleInfo=null;
this.inArea=false
};
o.prototype.resize=function(H,F,z){var D,J,L,C,u,I={},G,A,E=this;
if(typeof H==="object"){I=H
}else{I.width=H;
I.height=F;
I.duration=z
}L=I.width;
C=I.height;
u=I.duration||1000;
if(E.scaleInfo.width===L&&E.scaleInfo.height===C){return
}D=E._highlightId;
function K(M,O,N){if(k){M.width=O;
M.height=N
}else{a(M).width(O);
a(M).height(N)
}}function B(){K(E.overlay_canvas,L,C);
if(I.highlight){if(D>=0){var M=E.data[D];
M.tempOptions={fade:false};
E.getDataForKey(M.key).highlight();
M.tempOptions=null
}}K(E.base_canvas,L,C);
E.setAreasSelected();
E.resizing=false;
if(a.isFunction(I.callback)){I.callback()
}}if(!L){J=C/E.scaleInfo.realHeight;
L=Math.round(E.scaleInfo.realWidth*J)
}if(!C){J=L/E.scaleInfo.realWidth;
C=Math.round(E.scaleInfo.realHeight*J)
}G={width:String(L)+"px",height:String(C)+"px"};
if(!k){a(E.base_canvas).children().remove()
}A=a(E.wrapper).find(".mapster_el");
if(E.resizing&&I.force){a(A).stop()
}E.resizing=true;
if(I.duration){A.animate(G,{duration:u,complete:B,easing:"linear"});
a(E.wrapper).animate({scrollLeft:I.scrollLeft||0,scrollTop:I.scrollTop||0},{duration:u,easing:"linear"})
}else{A.css(G);
B()
}a(this.image).css(G);
E.scaleInfo=x.getScaleInfo(E.scaleInfo.realWidth,E.scaleInfo.realHeight,L,C);
x.each(E.data,function(){x.each(this.areas,function(){this.resize()
})
})
};
o.prototype.state=function(){return{complete:this.complete,resizing:this.resizing,zoomed:this.zoomed,zoomedArea:this.zoomedArea,scaleInfo:this.scaleInfo}
};
o.prototype.isReadyToBind=function(){return this.imagesAdded&&this.imagesLoaded&&(!this.options.safeLoad||y)
};
o.prototype.addImage=function(A,F,u){var B,z,E,C=this;
function D(){if(C.complete){return
}B=a.inArray(this,C.images);
if(B<0){throw ("Unable to find ref to image '"+this.src+"'.")
}C.imageStatus[B]=true;
if(a.inArray(false,C.imageStatus)<0&&(!C.options.safeLoad||y)){C.initialize()
}}function G(H){var I=C.images.push(H)-1;
C.imageSources[I]=E;
C.imageStatus[I]=false;
if(u){C.altImagesXref[u]=I
}}if(!A&&!F){return
}z=A;
E=F||a(z).attr("src");
if(!E){throw ("Missing image source")
}if(!z){z=a('<img class="mapster_el" />').hide()[0];
a("body").append(z);
G(z);
a(z).bind("load.mapster",D);
a(z).attr("src",E)
}else{G(z)
}};
o.prototype.bindImages=function(A){var u=true,z=this;
z.imagesAdded=true;
if(z.complete){return
}x.each(z.images,function(){if(!x.isImageLoaded(this)){u=false;
return false
}});
z.imagesLoaded=u;
if(z.isReadyToBind()){z.initialize();
return
}if(z.bindTries-->0){window.setTimeout(function(){z.bindImages(true)
},200)
}else{throw ("Images never seemed to finish loading.")
}};
o.prototype.altImage=function(u){return this.images[this.altImagesXref[u]]
};
o.prototype.wrapId=function(){return"mapster_wrap_"+this.index
};
o.prototype._idFromKey=function(u){return this.complete&&typeof u==="string"&&this._xref.hasOwnProperty(u)?this._xref[u]:-1
};
o.prototype.getSelected=function(){var u="";
x.each(this.data,function(){if(this.isSelected()){u+=(u?",":"")+this.key
}});
return u
};
o.prototype.getDataForArea=function(z){var u,A=a(z).attr(this.options.mapKey);
if(A){A=x.split(A)[0]
}u=this.data[this._idFromKey(A)];
if(u){u.area=z.length?z[0]:z
}else{u.area=null
}return u
};
o.prototype.getDataForKey=function(u){return this.data[this._idFromKey(u)]
};
o.prototype.getData=function(u){if(typeof u==="string"){return this.getDataForKey(u)
}else{if(u&&u.isJquery||x.isElement(u)){return this.getDataForArea(u)
}else{return null
}}};
o.prototype.ensureNoHighlight=function(){var u;
if(this._highlightId>=0){this.graphics.clear_highlight();
u=this.data[this._highlightId];
u.changeState("highlight",false);
this._highlightId=-1
}};
o.prototype.setHighlight=function(u){this._highlightId=u
};
o.prototype.setAreaOptions=function(z){var C,A,u,B=z||{};
for(C=B.length-1;
C>=0;
C--){A=B[C];
u=this.getDataForKey(A.key);
if(u){x.mergeObjects({target:u.options,source:A});
if(x.isBool(A.selected)){u.selected=A.selected
}}}};
o.prototype.setAreasSelected=function(z){var u;
if(z){for(u=z.length-1;
u>=0;
u--){this.data[z[u]].setAreaSelected()
}}else{x.each(this.data,function(){if(this.isSelectedOrStatic()){this.setAreaSelected()
}})
}};
o.prototype.initialize=function(){var D,R,X,S,u,A,E,U,C,I,K,M,L,B,G,H,J,V,W,F,N,T,O,P=this,Q=P.options;
function z(Z,aa){var Y=new d(P,Z,aa,Q);
Y.areaId=P._xref[Z]=P.data.push(Y)-1;
return Y.areaId
}if(P.complete){return
}P.complete=true;
J=a(P.image);
S=J.parent().attr("id");
if(S&&S.length>=12&&S.substring(0,12)==="mapster_wrap"){X=J.parent();
X.attr("id",P.wrapId())
}else{X=a('<div id="'+P.wrapId()+'"></div>');
if(Q.wrapClass){if(Q.wrapClass===true){X.addClass(J.attr("class"))
}else{X.addClass(Q.wrapClass)
}}}P.wrapper=X;
D=P.graphics.createVisibleCanvas(P.image);
R=P.graphics.createVisibleCanvas(P.image);
P.base_canvas=D;
P.overlay_canvas=R;
P._xref={};
P.data=[];
G=!Q.mapKey;
U=(a.browser.msie&&a.browser.version<=7)?"area":(G?"area[coords]":"area["+Q.mapKey+"]");
C=a(P.map).find(U);
x.scaleMap(P.image,Q.scaleMap,function(Y){T=P.scaleInfo=Y;
for(I=C.length-1;
I>=0;
I--){B=0;
A=C[I];
u=a(A);
if(!A.coords){continue
}O=A.getAttribute(Q.mapKey);
M=(G||typeof O!=="string")?[""]:x.split(O);
N=new n(P,A);
for(K=M.length-1;
K>=0;
K--){L=M[K];
if(Q.mapValue){H=u.attr(Q.mapValue)
}if(G){B=z(P.data.length,H);
F=P.data[B];
F.key=L=B.toString()
}else{B=P._xref[L];
if(B>=0){F=P.data[B];
if(H&&!P.data[B].value){F.value=H
}}else{B=z(L,H);
F=P.data[B]
}}F.areas.push(N)
}if(!N.nohref){u.bind("mouseover.mapster",P.mouseover).bind("mouseout.mapster",P.mouseout).bind("click.mapster",P.click).bind("mousedown.mapster",P.mousedown)
}if(!O){u.attr("data-mapster-key",L)
}}if(!O){P.options.mapKey="data-mapster-key"
}E={display:"block",position:"relative",padding:0,width:T.width,height:T.height};
if(Q.wrapCss){a.extend(E,Q.wrapCss)
}if(J.parent()[0]!==P.wrapper[0]){J.before(P.wrapper)
}X.css(E);
for(I=1;
I<P.images.length;
I++){X.append(P.images[I])
}a(P.images.slice(1)).hide();
J.css(e);
P.images[1].style.cssText=P.image.style.cssText;
X.append(P.images[1]).append(D).append(R).append(J);
x.setOpacity(P.image,0,!k);
x.setOpacity(P.images[1],1,!k);
P.setAreaOptions(Q.areas);
if(Q.isSelectable&&Q.onGetList){W=P.data.slice(0);
if(Q.sortList){if(Q.sortList==="desc"){V=function(Z,aa){return Z===aa?0:(Z>aa?-1:1)
}
}else{V=function(Z,aa){return Z===aa?0:(Z<aa?-1:1)
}
}W.sort(function(Z,aa){Z=Z.value;
aa=aa.value;
return V(Z,aa)
})
}P.options.boundList=Q.onGetList.call(P.image,W)
}P.setAreasSelected();
if(P.commands.length){x.each(P.commands,function(){b[this.command].apply(this.that,this.args)
});
P.commands=[]
}if(Q.onConfigured&&typeof Q.onConfigured==="function"){Q.onConfigured.call(J,true)
}})
};
o.prototype.clearEvents=function(){a(this.map).find("area").unbind(".mapster");
a(this.images).unbind(".mapster")
};
o.prototype._clearCanvases=function(u){if(!u){a(this.base_canvas).remove()
}a(this.overlay_canvas).remove()
};
o.prototype.clearTooltip=function(){if(this.activeToolTip){this.activeToolTip.remove();
this.activeToolTip=null;
this.activeToolTipID=-1
}x.each(this._tooltip_events,function(){this.object.unbind(this.event)
})
};
o.prototype.clearMapData=function(z){var u=this;
this._clearCanvases(z);
x.each(this.data,function(){this.reset(z)
});
this.data=null;
if(!z){this.image.style.cssText=this.imgCssText;
a(this.wrapper).before(this.image).remove()
}x.each(this.images,function(A){if(u.images[A]!==this.image){u.images[A]=null
}});
u.images=[];
this.image=null;
this.clearTooltip()
};
o.prototype.bindTooltipClose=function(C,u,B){var z=u+".mapster-tooltip",A=this;
if(a.inArray(C,this.options.toolTipClose)>=0){B.unbind(z).bind(z,function(){A.clearTooltip()
});
this._tooltip_events.push({object:B,event:z})
}};
o.prototype.removeSelectionFinish=function(){var u=this.graphics;
u.refresh_selections();
u.clear_highlight()
};
d=function(z,u,A){this.owner=z;
this.key=u||"";
this.areaId=-1;
this.value=A||"";
this.options={};
this.selected=null;
this.areas=[];
this.area=null;
this._effectiveOptions=null
};
d.prototype.coords=function(A,z){var u=[];
a.each(this.areas,function(C,B){u=u.concat(B.coords(A,z))
});
return u
};
d.prototype.reset=function(u){x.each(this.areas,function(){this.reset(u)
});
this.areas=null;
this.options=null;
this._effectiveOptions=null
};
d.prototype.isSelectedOrStatic=function(){var u=this.effectiveOptions();
return x.isBool(this.selected)?this.selected:(x.isBool(u.staticState)?u.staticState:(x.isBool(this.owner.options.staticState)?this.owner.options.staticState:false))
};
d.prototype.isSelected=function(){return this.selected||false
};
d.prototype.isSelectable=function(){return x.isBool(this.effectiveOptions().staticState)?false:(x.isBool(this.owner.options.staticState)?false:this.effectiveOptions().isSelectable)
};
d.prototype.isDeselectable=function(){return x.isBool(this.effectiveOptions().staticState)?false:(x.isBool(this.owner.options.staticState)?false:this.effectiveOptions().isDeselectable)
};
d.prototype.setTemporaryOption=function(u){this.tempOptions=u
};
d.prototype.effectiveOptions=function(z){var u=this._effectiveOptions=x.mergeObjects({source:[this.owner.area_options,this.options,z||{},this.tempOptions||{},{id:this.areaId}],deep:"render_highlight,render_select"});
return u
};
d.prototype.changeState=function(z,u){if(a.isFunction(this.owner.options.onStateChange)){this.owner.options.onStateChange.call(this.owner.image,{key:this.key,state:z,selected:u})
}};
d.prototype.highlight=function(u){var z=this.owner;
if(!u){z.graphics.addShapeGroup(this,"highlight")
}z.setHighlight(this.areaId);
this.changeState("highlight",true)
};
d.prototype.setAreaSelected=function(u){this.owner.graphics.addShapeGroup(this,"select");
if(u){this.changeState("select",true)
}};
d.prototype.addSelection=function(){var u=this.owner;
if(u.options.singleSelect){u.graphics.remove_selections();
x.each(u.data,function(){this.selected=false
})
}this.setAreaSelected(true);
this.selected=true;
if(u.options.singleSelect){u.graphics.refresh_selections()
}};
d.prototype.removeSelection=function(u){this.selected=false;
this.changeState("select",false);
this.owner.graphics.remove_selections(this.areaId);
if(!u){this.owner.removeSelectionFinish()
}};
d.prototype.toggleSelection=function(u){if(!this.isSelected()){this.addSelection()
}else{this.removeSelection(u)
}return this.isSelected()
};
d.prototype.showTooltip=function(){var G,C,I,H,A,B,z,E=this.effectiveOptions(),D=this.owner,u=D.options,F=D.options.toolTipContainer;
if(D.activeToolTipID===this.areaId){return
}if(typeof F==="string"){z=a(F)
}else{z=a(F).clone()
}G=z.html(E.toolTip).hide();
if(this.area){B=x.split(this.area.coords,",")
}else{B=[];
x.each(this.areas,function(){B=B.concat(this.coords())
})
}D.clearTooltip();
a(D.image).after(G);
D.activeToolTip=G;
D.activeToolTipID=this.areaId;
A=x.areaCorners(B,G.outerWidth(true),G.outerHeight(true));
C=A.tt[0];
I=A.tt[1];
H={left:C+"px",top:I+"px"};
if(!G.css("z-index")||G.css("z-index")==="auto"){H["z-index"]="2000"
}G.css(H).addClass("mapster_tooltip");
D.bindTooltipClose("area-click","click",a(D.map));
D.bindTooltipClose("tooltip-click","click",G);
if(D.options.toolTipFade){x.setOpacity(G[0],0,!k);
G.show();
x.fader(G[0],0,1,E.fadeDuration,!k)
}else{G.show()
}x.ifFunction(u.onShowToolTip,this.area||null,{toolTip:G,areaOptions:E,key:this.key,selected:this.isSelected()})
};
n=function(A,u){var z=this;
z.owner=A;
z.area=u;
z.originalCoords=[];
a.each(x.split(u.coords),function(C,B){z.originalCoords.push(parseFloat(B))
});
z.length=z.originalCoords.length;
z.shape=u.shape.toLowerCase();
z.nohref=u.nohref||!u.href;
if(z.owner.scaleInfo.scale){z.resize()
}};
n.prototype.resize=function(){this.area.coords=this.coords().join(",")
};
n.prototype.reset=function(){this.area.coords=this.coords(1).join(",")
};
n.prototype.coords=function(D,u){var z,A=[],C=D||this.owner.scaleInfo.scalePct,B=u||0;
if(C===1&&u===0){return this.originalCoords
}for(z=0;
z<this.length;
z++){A.push(Math.round(this.originalCoords[z]*C)+B)
}return A
};
j=function(u){var z=this;
z.active=false;
z.canvas=null;
z.width=0;
z.height=0;
z.shapes=[];
z.masks=[];
z.map_data=u
};
j.prototype._addShapeGroupImpl=function(u,C){var D,z,B=this,A=B.map_data;
z=u.effectiveOptions();
D=x.mergeObjects({source:[a.mapster.render_defaults,z,z["render_"+C],{alt_image:A.altImage(C)}]});
x.each(u.areas,function(){D.isMask=z.isMask||(this.nohref&&A.options.noHrefIsMask);
if(!x.isBool(D.staticState)){B.addShape(this,D)
}});
return D
};
j.prototype.begin=function(z,A){var u=a(z);
if(!k){this.elementName=A
}this.canvas=z;
this.width=u.width();
this.height=u.height();
this.shapes=[];
this.masks=[];
this.active=true
};
j.prototype.addShape=function(z,A){var u=A.isMask?this.masks:this.shapes;
u.push({mapArea:z,options:A})
};
j.prototype.createVisibleCanvas=function(u){return a(this.createCanvasFor(u)).addClass("mapster_el").css(e)[0]
};
j.prototype.addShapeGroup=function(u,D){var C=this,A,E,z,B=this.map_data,F=u.effectiveOptions();
if(D==="select"){E="static_"+u.areaId.toString();
z=B.base_canvas
}else{z=B.overlay_canvas
}C.begin(z,E);
if(F.includeKeys){A=x.split(F.includeKeys);
x.each(A,function(){C._addShapeGroupImpl(B.getDataForKey(this.toString()),D)
})
}F=C._addShapeGroupImpl(u,D);
C.render();
if(F.fade){x.fader(z,0,1,F.fadeDuration,!k)
}};
function f(u){var z=j.prototype;
if(u){z.hex_to_decimal=function(A){return Math.max(0,Math.min(parseInt(A,16),255))
};
z.css3color=function(A,B){return"rgba("+this.hex_to_decimal(A.substr(0,2))+","+this.hex_to_decimal(A.substr(2,2))+","+this.hex_to_decimal(A.substr(4,2))+","+B+")"
};
z.renderShape=function(B,D,E){var C,A=D.coords(null,E);
switch(D.shape){case"rect":B.rect(A[0],A[1],A[2]-A[0],A[3]-A[1]);
break;
case"poly":B.moveTo(A[0],A[1]);
for(C=2;
C<D.length;
C+=2){B.lineTo(A[C],A[C+1])
}B.lineTo(A[0],A[1]);
break;
case"circ":case"circle":B.arc(A[0],A[1],A[2],0,Math.PI*2,false);
break
}};
z.addAltImage=function(A,B,C,D){A.beginPath();
this.renderShape(A,C);
A.closePath();
A.clip();
A.globalAlpha=D.altImageOpacity;
A.drawImage(B,0,0,C.owner.scaleInfo.width,C.owner.scaleInfo.height)
};
z.render=function(){var C,D,E=this,B=E.masks.length,F=E.createCanvasFor(E.canvas),G=F.getContext("2d"),A=E.canvas.getContext("2d");
if(B){C=E.createCanvasFor(E.canvas);
D=C.getContext("2d");
D.clearRect(0,0,C.width,C.height);
x.each(E.masks,function(){D.save();
D.beginPath();
E.renderShape(D,this.mapArea);
D.closePath();
D.clip();
D.lineWidth=0;
D.fillStyle="#000";
D.fill();
D.restore()
})
}x.each(E.shapes,function(){var H=this;
G.save();
if(H.options.alt_image){E.addAltImage(G,H.options.alt_image,H.mapArea,H.options)
}else{if(H.options.fill){G.beginPath();
E.renderShape(G,H.mapArea);
G.closePath();
G.fillStyle=E.css3color(H.options.fillColor,H.options.fillOpacity);
G.fill()
}}G.restore()
});
x.each(E.shapes.concat(E.masks),function(){var I=this,H=I.options.strokeWidth==1?0.5:0;
if(I.options.stroke){G.save();
G.strokeStyle=E.css3color(I.options.strokeColor,I.options.strokeOpacity);
G.lineWidth=I.options.strokeWidth;
G.beginPath();
E.renderShape(G,I.mapArea,H);
G.closePath();
G.stroke();
G.restore()
}});
if(B){D.globalCompositeOperation="source-out";
D.drawImage(F,0,0);
A.drawImage(C,0,0)
}else{A.drawImage(F,0,0)
}E.active=false;
return E.canvas
};
z.createCanvasFor=function(C){var B=a(C),E=B.width()||B[0].width,D=B.height()||B[0].height,A=a('<canvas width="'+E+'" height="'+D+'"></canvas>')[0];
return A
};
z.clear_highlight=function(){var A=this.map_data.overlay_canvas;
A.getContext("2d").clearRect(0,0,A.width,A.height)
};
z.remove_selections=function(){};
z.refresh_selections=function(){var A,B=this.map_data;
A=B.base_canvas;
B.base_canvas=this.createVisibleCanvas(B.image);
a(B.base_canvas).hide();
a(A).before(B.base_canvas);
B.setAreasSelected();
a(B.base_canvas).show();
a(A).remove()
}
}else{z.renderShape=function(F,H,B){var G=this,I,C,J,E,D,K,A=F.coords();
E=G.elementName?'name="'+G.elementName+'" ':"";
D=B?'class="'+B+'" ':"";
J='<v:fill color="#'+H.fillColor+'" opacity="'+(H.fill?H.fillOpacity:0)+'" /><v:stroke opacity="'+H.strokeOpacity+'"/>';
if(H.stroke){I="strokeweight="+H.strokeWidth+' stroked="t" strokecolor="#'+H.strokeColor+'"'
}else{I='stroked="f"'
}switch(F.shape){case"rect":K="<v:rect "+D+E+' filled="t" '+I+' style="zoom:1;margin:0;padding:0;display:block;position:absolute;left:'+A[0]+"px;top:"+A[1]+"px;width:"+(A[2]-A[0])+"px;height:"+(A[3]-A[1])+'px;">'+J+"</v:rect>";
break;
case"poly":K="<v:shape "+D+E+' filled="t" '+I+' coordorigin="0,0" coordsize="'+G.width+","+G.height+'" path="m '+A[0]+","+A[1]+" l "+A.slice(2).join(",")+' x e" style="zoom:1;margin:0;padding:0;display:block;position:absolute;top:0px;left:0px;width:'+G.width+"px;height:"+G.height+'px;">'+J+"</v:shape>";
break;
case"circ":case"circle":K="<v:oval "+D+E+' filled="t" '+I+' style="zoom:1;margin:0;padding:0;display:block;position:absolute;left:'+(A[0]-A[2])+"px;top:"+(A[1]-A[2])+"px;width:"+(A[2]*2)+"px;height:"+(A[2]*2)+'px;">'+J+"</v:oval>";
break
}C=a(K);
a(G.canvas).append(C);
return C
};
z.render=function(){var B,A=this;
x.each(this.shapes,function(){A.renderShape(this.mapArea,this.options)
});
if(this.masks.length){x.each(this.masks,function(){B=x.mergeObjects({source:[this.options,{fillOpacity:1,fillColor:this.options.fillColorMask}]});
A.renderShape(this.mapArea,B,"mapster_mask")
})
}this.active=false;
return this.canvas
};
z.createCanvasFor=function(B){var A=a(B),D=A.width(),C=A.height();
return a('<var width="'+D+'" height="'+C+'" style="zoom:1;overflow:hidden;display:block;width:'+D+"px;height:"+C+'px;"></var>')[0]
};
z.clear_highlight=function(){a(this.map_data.overlay_canvas).children().remove()
};
z.remove_selections=function(A){if(A>=0){a(this.map_data.base_canvas).find('[name="static_'+A.toString()+'"]').remove()
}else{a(this.map_data.base_canvas).children().remove()
}};
z.refresh_selections=function(){return null
}
}}p.get=function(u){return(new s(this,function(){return this.getSelected()
},function(){return this.isSelected()
},{name:"get",args:arguments,key:u,first:true,defaultReturn:""})).go()
};
p.data=function(u){return(new s(this,null,function(){return this
},{name:"data",args:arguments,key:u})).go()
};
p.tooltip=function(u){return(new s(this,function(){this.clearTooltip()
},function(){if(this.effectiveOptions().toolTip){this.showTooltip()
}},{name:"tooltip",args:arguments,key:u})).go()
};
p.highlight=function(u){return(new s(this,function(A){if(u===false){this.ensureNoHighlight()
}else{var z=this._highlightId;
return z>=0?this.data[z].key:null
}},function(){this.highlight()
},{name:"highlight",args:arguments,key:u,first:true})).go()
};
p.set=function(F,A,G){var C,E,D,z,B,u=[];
function H(I){if(I){switch(F){case true:I.addSelection();
break;
case false:I.removeSelection(true);
break;
default:I.toggleSelection();
break
}}}z=x.isBool(G)?G:true;
this.each(function(){var I;
D=g(this);
if(!D){return true
}B="";
if(a(this).is("img")){if(t(D,a(this),"set",[F,A,z])){return true
}if(A instanceof Array){if(A.length){B=A.join(",")
}}else{B=A
}if(B){x.each(x.split(B),function(){H(D.getDataForKey(this.toString()))
});
if(!F){D.removeSelectionFinish()
}}}else{E=a(this).parent()[0];
if(C&&E!==C){D=g(this);
if(!D){return true
}C=E
}C=E;
if(t(D,a(this),"set",[F,A,z])){return true
}I=D.getDataForArea(this);
if(a.inArray(I,u)<0){u.push(I)
}}a.each(u,function(K,J){H(J)
});
if(z&&D.options.boundList){w(D.options,i(D.options,B),F)
}});
return this
};
p.unbind=function(u){return(new s(this,function(){this.clearEvents();
this.clearMapData(u);
v(this)
},null,{name:"unbind",args:arguments})).go()
};
function q(C,z){var u,A,B=C.options.areas;
if(z){x.each(z,function(){A=x.arrayIndexOfProp(B,"key",this.key);
if(A>=0){a.extend(B[A],this)
}else{B.push(this)
}u=C.getDataForKey(this.key);
if(u){a.extend(u.options,this)
}})
}}function r(u,z){x.mergeObjects({ignore:"areas",target:u.options,source:z,deep:"render_select,render_highlight"});
q(u,z.areas);
x.mergeObjects({target:u.area_options,source:u.options,add:false});
x.each(u.data,function(){this._effectiveOptions=null
})
}p.rebind=function(u){return(new s(this,function(){r(this,u);
this.setAreaOptions(u.areas||{});
this.setAreasSelected()
},null,{name:"rebind",args:arguments})).go()
};
p.get_options=function(A,z){var u=x.isBool(A)?A:z;
return(new s(this,function(){var B=a.extend({},this.options);
if(u){B.render_select=x.mergeObjects({template:a.mapster.render_defaults,source:[B,B.render_select]});
B.render_highlight=x.mergeObjects({template:a.mapster.render_defaults,source:[B,B.render_highlight]})
}return B
},function(){return u?this.effectiveOptions():this.options
},{name:"get_options",args:arguments,first:true,key:A})).go()
};
p.set_options=function(u){return(new s(this,function(){r(this,u)
},null,{name:"set_options",args:arguments})).go()
};
p.unload=function(){var u;
for(u=p.map_cache.length-1;
u>=0;
u--){if(p.map_cache[u]){p.unbind.call(a(p.map_cache[u].image))
}}p.graphics=null
};
p.resize=function(A,z,u){if(!A&&!z){return false
}return(new s(this,function(){this.resize(A,z,u)
},null,{name:"resize",args:arguments})).go()
};
p.snapshot=function(){return(new s(this,function(){x.each(this.data,function(){this.selected=false
});
this.base_canvas=this.graphics.createVisibleCanvas(this.image);
a(this.image).before(this.base_canvas)
},null,{name:"snapshot"})).go()
};
p.state=function(){var u,z=null;
a(this).each(function(){if(this.nodeName==="IMG"){u=g(this);
if(u){z=u.state()
}return false
}});
return z
};
p.zoom=function(u,A){var z=A||{};
function B(C){var Q,D,G,U,N,E,F,O,P,K,L,J,I,S,T,M=z.padding||0,R=C?20:0,H=this,V=false;
if(C){if(!H.zoomed){H.zoomed=true;
H.preZoomWidth=H.scaleInfo.width;
H.preZoomHeight=H.scaleInfo.height;
H.zoomedArea=C;
if(z.scroll){H.wrapper.css({overflow:"auto"})
}}D=a.mapster.utils.areaCorners(C.coords(1,0));
U=H.wrapper.innerWidth()-R-M*2;
G=H.wrapper.innerHeight()-R-M*2;
E=D.maxX-D.minX;
F=D.maxY-D.minY;
O=U/E;
P=G/F;
N=Math.min(O,P);
K=(U-E*N)/2;
L=(G-F*N)/2;
J=H.scaleInfo.realWidth*N;
I=H.scaleInfo.realHeight*N;
S=(D.minX)*N-M-K;
T=(D.minY)*N-M-L
}else{if(!H.zoomed){return
}V=true;
J=H.preZoomWidth;
I=H.preZoomHeight;
S=null;
T=null
}this.resize({width:J,height:I,duration:z.duration,scroll:Q,scrollLeft:S,scrollTop:T,callback:(function(){var X=V,Y=z.scroll,W=C;
return function(){if(X){H.preZoomWidth=null;
H.preZoomHeight=null;
H.zoomed=false;
H.zoomedArea=false;
if(Y){H.wrapper.css({overflow:"inherit"})
}}else{H.zoomedArea=W
}}
}())})
}return(new s(this,function(C){B.call(this)
},function(){B.call(this.owner,this)
},{name:"zoom",args:arguments,first:true,key:u})).go()
};
p.bind=function(u){var z=x.mergeObjects({source:[a.mapster.defaults,u],deep:"render_select,render_highlight"});
return this.each(function(){var A,B,D,C;
A=a(this);
A.css("border",0);
C=g(this);
if(C){p.unbind.apply(A);
if(!C.complete){A.bind();
return true
}C=null
}D=this.getAttribute("usemap");
B=D&&a('map[name="'+D.substr(1)+'"]');
if(!(A.is("img")&&D&&B.size()>0)){return true
}if(!C){C=new o(this,z);
C.index=c(C);
C.map=B;
C.addImage(this);
C.addImage(null,this.src);
if(k){C.addImage(null,z.render_highlight.altImage||z.altImage,"highlight");
C.addImage(null,z.render_select.altImage||z.altImage,"select")
}C.bindImages()
}})
};
p.init=function(A){var z,u;
k=(document.namespaces&&document.namespaces.g_vml_)?false:a("<canvas></canvas>")[0].getContext?true:false;
m="ontouchstart" in document.documentElement;
if(!(k||document.namespaces)){a.fn.mapster=function(){return this
};
return
}if(!x.isBool(a.mapster.defaults.highlight)){a.mapster.defaults.highlight=!m
}f(k);
if(x.isBool(A)){k=A
}if(a.browser.msie&&!k&&!l){document.namespaces.add("v","urn:schemas-microsoft-com:vml");
z=document.createStyleSheet();
u=["shape","rect","oval","circ","fill","stroke","imagedata","group","textbox"];
a.each(u,function(C,B){z.addRule("v\\:"+B,"behavior: url(#default#VML); antialias:true")
});
l=true
}};
return p
}());
a.mapster.unload=function(){this.impl.unload();
a.mapster.utils.fader=null;
a.mapster.utils=null;
a.mapster.impl=null;
a.fn.mapster=null;
a.mapster=null;
a("*").unbind()
};
b={select:function(){a.mapster.impl.set.call(this,true)
},deselect:function(){a.mapster.impl.set.call(this,false)
}};
a.each(["bind","rebind","unbind","set","get","data","highlight","get_options","set_options","snapshot","tooltip","test","resize","state","zoom"],function(d,c){b[c]=a.mapster.impl[c]
});
a.mapster.impl.init()
}(jQuery));