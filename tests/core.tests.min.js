/*global Test: true, iqtest */
this.tests=this.tests||[];this.tests.push(iqtest.create("core","tests for core/common functionality").add("Utility Functions",function(b,k){var l,g=$.mapster.utils;
b.isTrue(g.isBool(true),"isBool returns true=true");b.isTrue(g.isBool(false),"isBool returns false=true");
b.isFalse(g.isBool(null),"isBool returns null=false");b.equals(g.boolOrDefault(true),true,"boolOrDefault(true) returns true");
b.equals(g.boolOrDefault(false),false,"boolOrDefault(false) returns false");b.equals(g.boolOrDefault("something"),false,"boolOrDefault('something') (a truthy value) returns false");
b.equals(g.boolOrDefault(null),false,"boolOrDefault(null) (a falsy value)  returns false");
b.equals(g.boolOrDefault(true,"foo"),true,"boolOrDefault(true) with default value returns true");
b.equals(g.boolOrDefault(false,"foo"),false,"boolOrDefault(false) with default value returns false");
b.equals(g.boolOrDefault("something","foo"),"foo","boolOrDefault('something') (a falsy value) with default value returns default");
b.equals(g.boolOrDefault(undefined,"foo"),"foo","boolOrDefault(undefined) (a falsy value) with default value returns default");
var h={a:"a",b:"b"};var i={a:"a2",b:"b2",c:"c"};var d={a:[1,2],b:{a:"a2",b:"b2"}};
l=g.updateProps({},d);b.equals([1,2],l.a,"Array copied as array");l=g.updateProps(h,i);
b.equals(l,{a:"a2",b:"b2"},"Merge with extra properties - no add");b.equals(h,{a:"a2",b:"b2"},"Test input object following merge matches output");
l=g.updateProps(i,h,i);b.equals(l,{a:"a2",b:"b2",c:"c"},"Merge with extra properties - add");
i={a:"a3"};l=g.updateProps(h,i);h={a:"unchanged-a",b:"unchanged-b"};i={b:"b4"};var j={a:"a4"};
b.equals(g.updateProps(h,i,j),{a:"a4",b:"b4"},"Merge with mutiple inputs");var m={p1:"prop1",p2:"prop2"};
i={p1:"newProp1",p3:"prop3",p4:"prop4"};b.equals(g.updateProps({},m,i),{p1:"newProp1",p2:"prop2"},"Template works.");
var e={p1:"newProp1",p2:"prop2",p4:"prop4"};m.p3={subp1:"subprop1",subp2:"subprop2"};
m.p4=null;l={};e.p3=i.p3;g.updateProps(l,m,i);b.equals(l,e,"Copying a sub-object - start");
delete i.p3;l.p3={existing:"bar"};e.p3=m.p3;e.p3.existing="bar";g.updateProps(l,m,i);
b.equals(l,e,"Deep works");h={test:"test"};var c=[{name:"test1",value:"value1"},{name:"test2",value:"value2"},{name:"test3",value:h}];
var f=g.indexOfProp(c,"name","test2");b.equals(f,1,"arrayIndexOfProp returns correct value for string");
f=g.indexOfProp(c,"value",h);b.equals(f,2,"arrayIndexOfProp returns correct value for object & last element");
f=g.indexOfProp(c,"name","test1");b.equals(f,0,"arrayIndexOfProp returns correct value for first element");
f=g.indexOfProp(c,"foo","bar");b.equals(f,-1,"Missing property handled correctly");
f=g.indexOfProp(c,"name","bar");b.equals(f,-1,"Missing property value handled correctly");
}));