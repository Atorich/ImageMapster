/*global Test: true, iqtest */
this.tests=this.tests||[];(function(){var b={isSelectable:true,singleSelect:false,mapKey:"state",mapValue:"full",listKey:"name",listSelectedAttribute:"checked",sortList:"asc",showToolTip:true,toolTipClose:["area-mouseout"],areas:[{key:"TX",selected:true},{key:"AK",isSelectable:false,selected:true},{key:"WA",staticState:true},{key:"OR",staticState:false},{key:"CA",toolTip:$('<div>Don\'t mess with Louisiana. Why ? <a href = "http://dontmesswithtexas.org/" target="_blank" > Click here </a> for more info. </div> ')}]};
function a(d,c,f){var e=f.split(","),g=$();d.each(function(){for(var h=0;h<e.length;
h++){if($(this).is("["+c+"='"+e[h]+"']")){g=g.add(this);h=e.length;}}});return g;
}this.tests.push(iqtest.create("basic","manipulation tests - migrated from old test suite (not organized)").add("Migrated tests",function(c,m){var j=$.mapster.utils;
var e=$("#test_elements *").length;var i=$("img").mapster();i.mapster("unbind");var h=i.mapster("test","typeof m === 'undefined'");
if(!h){i=$("img").mapster(b);c.equals(1,i.mapster("test","typeof m !== 'undefined' && m.map_cache && m.map_cache.length"),"Only imagemap bound images were obtained on generic create");
i=$("img,div").mapster({mapKey:"state"});c.equals(1,i.mapster("test","typeof m !== 'undefined' && m.map_cache && m.map_cache.length"),"Only imagemap bound images were obtained on generic create with other elements");
}i=$("#usa_image").mapster(b);var g=j.updateProps({},$.mapster.defaults,b);var l=i.mapster("get_options");
c.equals(l,g,"Options retrieved match initial options");var k={isSelectable:false,areas:[{key:"MT",isDeselectable:false}]};
i.mapster("set_options",k);l=i.mapster("get_options");var f=$.extend({},g);f.isSelectable=false;
c.valuePropertiesEqual(l,f,"Options retrieved match updated value");c.equals(l.areas.length,6,"Area option was added");
l=i.mapster("set_options",{isSelectable:true,areas:[{key:"MT",isDeselectable:true}]});
c.equals(!!i.mapster,true,"Plugin returns jQuery object");c.equals(i,$("#usa_image"),"Plugin returns jquery same object as invocation");
var n=i.mapster("get");c.contentsEqual(n,"AK,TX","Initially selected items returned with 'get'");
n=i.mapster("get","TX");c.equals(n,true,"Initially selected single item returned true with 'get'");
n=i.mapster("get","ME");c.equals(n,false,"Initially deselected single item returned false with 'get'");
a($("area"),"state","AK,HI,LA").mapster("set",true);var d=i.mapster("get");c.contentsEqual(d,"HI,AK,LA,TX","Set using area works");
i.mapster("set",false,"LA,TX");c.contentsEqual("HI,AK",i.mapster("get"),"unset using keys works");
i.mapster("set",true,"ME,OH,TX");c.contentsEqual("HI,AK,ME,OH,TX",i.mapster("get"),"set using keys works");
a($("area"),"state","AK,MT").mapster("set");c.contentsEqual("HI,ME,OH,TX,MT",i.mapster("get"),"toggling keys works");
$('area[state="AZ"]').first().click();n=i.mapster("get","AZ");c.equals(true,n,"Click-selected area returned 'get'");
c.contentsEqual("HI,ME,OH,TX,MT,AZ",i.mapster("get"),"Complete list returned with 'get'");
$('area[state="OR"]').first().click();n=i.mapster("get","OR");c.equals(n,false,"Cannot select 'staticState=false' area with click");
n=i.mapster("get","WA");c.equals(n,false,"staticState=true area is considered not selected");
l=i.mapster("get_options","WA");c.equals(l.staticState,true,"get effective options returned correct static state for WA");
l=i.mapster("get_options","OR");c.equals(l.staticState,false,"get effective options returned correct static state for OR");
$('area[state="WA"]').first().click();n=i.mapster("get","WA");c.equals(n,false,"Cannot change selection state of 'staticState=true' area with click");
i.mapster("set",true,"OR");n=i.mapster("get","OR");c.equals(n,true,"Can select 'staticState=false' area with 'set'");
i.mapster("set",false,"WA");c.equals(i.mapster("get","WA"),false,"Can deselect staticState=true' area with 'set'");
k=i.mapster("get_options");k.singleSelect=true;i.mapster("rebind",k);c.contentsEqual(i.mapster("get"),"TX,AK","Rebind with singleSelect reverted to original state");
i.mapster("set",true,"MI");c.equals(i.mapster("get"),"MI","Single select worked.");
i.mapster("set_options",{isDeselectable:false});$('area[state="MI"]').first().click();
c.equals(i.mapster("get","MI"),true,"Cannot deselect single selected item with isDeselectable=false");
$('area[state="UT"]').first().click();c.equals(i.mapster("get"),"UT","New single state selected");
i.mapster("set_options",{singleSelect:false,isDeselectable:true,areas:[{key:"ME",isDeselectable:false}]});
$('area[state="UT"]').first().click();c.equals(i.mapster("get","UT"),false,"Was able to deselect item after removing singleSelect");
i.mapster("set",true,"CA,HI,ME");$('area[state="ME"]').first().click();c.equals(i.mapster("get","ME"),true,"Could not deselect one item marked as !isDeselectable");
$('area[state="CA"]').first().click();c.equals(i.mapster("get","CA"),false,"Could deselect other items ");
c.equals(i.mapster("highlight"),null,"nothing is highlighted");$('area[state="CA"]').first().mapster("highlight");
c.equals(i.mapster("highlight"),"CA","highlighted manually");i.mapster("highlight","LA");
c.equals(i.mapster("highlight"),"LA","highlighted manually using other technique");
i.mapster("highlight",false);c.equals(i.mapster("highlight"),null,"everything unhighlighted");
i.mapster("unbind");c.equals($("canvas").length,0,"No canvases remain after an unbind.");
c.equals($("#test_elements *").length,e,"# elements in DOM is the same.");}));}());
